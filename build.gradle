buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.0.2'
group = 'com.infinix.enhancedatm'
archivesBaseName = 'enhancedatm'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.20.1'
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                enhancedatm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                enhancedatm {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                enhancedatm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'enhancedatm', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                enhancedatm {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Enhanced ATM",
            "Specification-Vendor": "InfinixMC",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor": "InfinixMC",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Directorios de destino para copiar el mod
def curseforgeModsDir = 'C:/Users/ASUS-DESKTOP/curseforge/minecraft/Instances/test mods/mods'
def serverModsDir = 'C:/Users/ASUS-DESKTOP/Desktop/server/mods'

// Tarea para limpiar versiones anteriores del mod
task cleanOldMods {
    description = 'Elimina versiones anteriores del mod de los directorios de destino'
    group = 'build'
    
    doLast {
        // Patr√≥n para identificar archivos del mod (cualquier versi√≥n)
        def modPattern = ~/enhancedatm-.*\.jar/
        
        // Limpiar directorio de CurseForge
        def curseforgeDir = file(curseforgeModsDir)
        if (curseforgeDir.exists()) {
            curseforgeDir.listFiles()?.each { file ->
                if (file.name.matches(modPattern)) {
                    println "Eliminando versi√≥n anterior: ${file.name} de CurseForge"
                    file.delete()
                }
            }
        } else {
            println "Creando directorio de CurseForge: ${curseforgeModsDir}"
            curseforgeDir.mkdirs()
        }
        
        // Limpiar directorio del servidor
        def serverDir = file(serverModsDir)
        if (serverDir.exists()) {
            serverDir.listFiles()?.each { file ->
                if (file.name.matches(modPattern)) {
                    println "Eliminando versi√≥n anterior: ${file.name} del servidor"
                    file.delete()
                }
            }
        } else {
            println "Creando directorio del servidor: ${serverModsDir}"
            serverDir.mkdirs()
        }
    }
}

// Tarea para copiar el mod compilado a los directorios de destino
task copyModToDestinations {
    description = 'Copia el mod compilado a los directorios de CurseForge y Servidor'
    group = 'build'
    
    dependsOn cleanOldMods
    dependsOn jar
    
    doLast {
        // Obtener el archivo JAR obfuscado de la carpeta libs
        def modJar = file("${buildDir}/libs/${archivesBaseName}-${version}.jar")
        
        if (!modJar.exists()) {
            throw new GradleException("No se encontr√≥ el archivo JAR compilado: ${modJar.path}")
        }
        
        // Copiar a CurseForge
        copy {
            from modJar
            into curseforgeModsDir
        }
        
        // Copiar al servidor
        copy {
            from modJar
            into serverModsDir
        }
        
        println "===========================================" 
        println "üéâ Enhanced ATM MOD COMPILADO EXITOSAMENTE!"
        println "===========================================" 
        println "Mod copiado exitosamente a:"
        println "  üéÆ CurseForge: ${curseforgeModsDir}"
        println "  üñ•Ô∏è  Servidor: ${serverModsDir}"
        println "  üì¶ Archivo: ${modJar.name}"
        println "===========================================" 
        println "‚úÖ ¬°Listo para usar! Reinicia Minecraft/Servidor"
        println "==========================================="
    }
}

// Hacer que la copia se ejecute autom√°ticamente despu√©s del build
build.finalizedBy(copyModToDestinations)